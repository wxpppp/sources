name: build psycopg-binary wheel

on:
  schedule:
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      version:
        required: false
        default: 'latest'
env:
  PACKAGE: psycopg_binary
  REPOSITORY: psycopg/psycopg
  LIBPQ_VERSION: "17.5"
  OPENSSL_VERSION: "3.5.0"

jobs:

  build:
    name: Build psycopg-binary ${{ matrix.pyver }} ${{ matrix.platform }} wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [loongarch64-abi2.0]
        platform: [manylinux, musllinux]
        pyver: [cp38, cp39, cp310, cp311, cp312, cp313]
    steps:
      - name: Check if exists
        run: |
          pkg=${{ env.PACKAGE }}

          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            version="latest"
          else
            version="${{ github.event.inputs.version }}"
          fi

          platform="${{ matrix.platform }}"
          url="https://lpypi.loongnix.cn/loongson/pypi/+simple/${pkg}/"
          #upstream_url="https://api.github.com/repos/${{ env.REPOSITORY }}/tags"
          upstream_url="https://pypi.org/pypi/${pkg}/json"

          if [[ "${version}" == "latest" ]]; then
            #version="$(curl -s ${upstream_url} | jq -r '.[0].name')"
            version="$(curl -s ${upstream_url} | jq -r '.info.version')"
          fi

          if curl -Ls ${url} | grep -q ${pkg}-${version}-.*${{ matrix.pyver }}-${platform}.*loongarch64; then
            echo "SKIP=true" >> $GITHUB_ENV
            echo "${platform} wheels already exists."
          else
            echo "SKIP=false" >> $GITHUB_ENV
            echo "${platform} wheels not found, continue building"
          fi

          echo "VERSION=${version}" >> $GITHUB_ENV

      - name: Clean workspace
        if: ${{ env.SKIP != 'true' }}
        run: |
          safe-rm -rf * .*

      - name: Download source
        if: ${{ env.SKIP != 'true' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.VERSION }}

      - name: Create the binary package source tree
        run: python3 ./tools/build/copy_to_binary.py

      - name: Build wheel
        if: ${{ env.SKIP != 'true' }}
        run: |
          pip3 install -i https://lpypi.loongnix.cn/loongson/pypi/+simple cibuildwheel==2.22.0
          cibuildwheel psycopg_binary
        env:
          PIP_INDEX_URL: "https://lpypi.loongnix.cn/loongson/pypi/+simple"
          CIBW_ARCHS: "loongarch64"
          CIBW_BUILD: "${{ matrix.pyver }}-${{ matrix.platform }}_loongarch64"
          CIBW_BEFORE_ALL_LINUX: |
            if command -v yum >/dev/null 2>&1; then
              source /etc/os-release && 
              sed -i "s/centos/$ID/g" tools/build/build_libpq.sh &&
              sed -i "s/pam-devel/pam-devel perl/g" tools/build/build_libpq.sh &&
              sed -i "s/centos/$ID/g" tools/build/print_so_versions.sh &&
              sed -i "s/centos/$ID/g" tools/build/wheel_linux_before_all.sh
            fi
            ./tools/build/wheel_linux_before_all.sh
          CIBW_REPAIR_WHEEL_COMMAND: >-
            export LD_LIBRARY_PATH="$LIBPQ_BUILD_PREFIX/lib"
            && ./tools/build/strip_wheel.sh {wheel}
            && auditwheel repair -w {dest_dir} {wheel}
          CIBW_TEST_SKIP: "*"
          CIBW_ENVIRONMENT_PASS_LINUX: LIBPQ_VERSION OPENSSL_VERSION PIP_INDEX_URL
          CIBW_ENVIRONMENT: >-
            PACKAGE_IMPL=binary
            LIBPQ_BUILD_PREFIX=/host/tmp/libpq.build-${{ matrix.platform }}-${{ env.LIBPQ_VERSION }}
            PATH="$LIBPQ_BUILD_PREFIX/bin:$PATH"
            HTTPS_PROXY=${{ secrets.PROXY_URL }}

      - name: Upload wheels
        if: ${{ env.SKIP != 'true' }}
        run: |
          ls wheelhouse/*${{ matrix.pyver }}-${{ matrix.platform }}_*.whl || exit 1
          twine upload --repository-url https://lpypi.loongnix.cn/loongson/pypi wheelhouse/*${{ matrix.pyver }}-${{ matrix.platform }}_*.whl
        env:
          TWINE_USERNAME: ${{ secrets.INDEX_NAME }}
          TWINE_PASSWORD: ${{ secrets.INDEX_TOKEN }}
