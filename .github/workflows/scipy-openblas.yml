name: build scipy-openblas

on:
  workflow_dispatch:
    inputs:
      version:
        required: false
        default: 'latest'

env:
  REPO_DIR: OpenBLAS

jobs:
  build:
    runs-on: loongarch64-abi2.0
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        PLAT: [loongarch64]
        INTERFACE64: ['0', '1']
        MB_ML_VER: ['_2_38']
        MB_ML_LIBC: ['manylinux']
        include:
          - PLAT: loongarch64
            INTERFACE64: '1'
            MB_ML_LIBC: musllinux
            MB_ML_VER: _1_2
          - PLAT: loongarch64
            INTERFACE64: '0'
            MB_ML_LIBC: musllinux
            MB_ML_VER: _1_2
    env:
      NIGHTLY: false
      MB_ML_LIBC: ${{ matrix.MB_ML_LIBC }}
      MB_ML_VER: ${{ matrix.MB_ML_VER }}
      INTERFACE64: ${{ matrix.INTERFACE64 }}
      BUILD_DIR: ${{ github.workspace }}
      PLAT: ${{ matrix.PLAT }}

    steps:
    - name: Check if exists
      run: |
        case $INTERFACE64 in
          0) pkg="scipy-openblas32" ;;
          1) pkg="scipy-openblas64" ;;
        esac

        version="${{ github.event.inputs.version }}"
        platform="$MB_ML_LIBC"
        url="https://lpypi.loongnix.cn/loongson/pypi/+simple/${pkg}/"
        repo="loong64/openblas-libs"
        upstream_url="https://api.github.com/repos/MacPython/openblas-libs/releases/latest"

        if [[ "${version}" == "latest" ]]; then
          version="$(curl -s "${upstream_url}" | jq -r ".tag_name")"
          repo="MacPython/openblas-libs"
        fi

        openblas_commit=$(echo ${version} | awk -F. '{print $1"."$2"."$3}')

        if curl -s "${url}" | grep ${VERSION} | grep -q ${PLATFORM}; then
            echo "SKIP=true" >> $GITHUB_ENV
            echo "${PLATFORM} wheels already exists."
        else
            echo "SKIP=false" >> $GITHUB_ENV
            echo "${PLATFORM} wheels not found, continue building"
        fi

        echo "VERSION=${version}" >> $GITHUB_ENV
        echo "REPO=${repo}" >> $GITHUB_ENV
        echo "OPENBLAS_COMMIT=${openblas_commit}" >> $GITHUB_ENV


    - name: Clean workspace
      if: ${{ env.SKIP != 'true' }}
      run: |
        rm -rf ${{ github.workspace }}/* ${{ github.workspace }}/.*
        
    - name: Download source
      if: ${{ env.SKIP != 'true' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.REPO }}
        ref: ${{ env.VERSION }}
        submodules: recursive
        fetch-depth: 0

    - name: Build Openblas
      if: ${{ env.SKIP != 'true' }}
      run: |
        sed -i "s/quay.io/lcr.loongnix.cn/g" tools/build_steps.sh
        set -xeo pipefail
        source tools/build_steps.sh
        echo "------ BEFORE BUILD ---------"
        before_build
        if [[ "$NIGHTLY" = "true" ]]; then
          echo "------ CLEAN CODE --------"
          clean_code $REPO_DIR develop
          echo "------ BUILD LIB --------"
          build_lib "$PLAT" "$INTERFACE64" "1"
        else
          echo "------ CLEAN CODE --------"
          clean_code $REPO_DIR $OPENBLAS_COMMIT
          echo -n > OpenBLAS/utest/test_kernel_regress.c
          echo "------ BUILD LIB --------"
          build_lib "$PLAT" "$INTERFACE64" "0"
        fi

    - name: Build and test wheel
      if: ${{ env.SKIP != 'true' }}
      run: |
        if [[ "$NIGHTLY" = "true" ]]; then
          # Set the pyproject.toml version: convert v0.3.24-30-g138ed79f to 0.3.34.30
          version=$(cd OpenBLAS && git describe --tags --abbrev=8 | sed -e "s/^v\(.*\)-g.*/\1/" | sed -e "s/-/./g")
          sed -e "s/^version = .*/version = \"${version}\"/" -i.bak pyproject.toml
        fi
        if [ "macos-13" == "${{ matrix.os }}" ]; then
          source tools/build_wheel.sh
        else
          libc=${MB_ML_LIBC:-manylinux}
          docker_image=lcr.loongnix.cn/pypa/${libc}${MB_ML_VER}_${PLAT}
          docker run --rm -e INTERFACE64="${INTERFACE64}" \
            -e MB_ML_LIBC="${MB_ML_LIBC}" \
            -v $(pwd):/openblas $docker_image \
            /bin/bash -xe /openblas/tools/build_wheel.sh
        fi

    - name: Upload wheels
      if: ${{ env.SKIP != 'true' }}
      run: |
        ls dist/*.whl || exit 0
        twine upload --repository-url https://lpypi.loongnix.cn/loongson/pypi dist/*.whl
        env:
          TWINE_USERNAME: ${{ secrets.INDEX_NAME  }}
          TWINE_PASSWORD: ${{ secrets.INDEX_TOKEN }}
